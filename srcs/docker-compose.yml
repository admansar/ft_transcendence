version: '3.8'

services:
  postgres:
    build:
      context: ./containers/postgres
      dockerfile: Dockerfile
      args:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_HOST=${POSTGRES_HOST}
    container_name: postgres
    volumes: 
      - "postgres:/var/lib/postgresql/data"
    env_file:
      - .env
    networks:
      - ft_transcendence_network
    restart: always

  backend:
    build:
      context: ./containers/python
      dockerfile: Dockerfile
      args:
        - PYTHONUNBUFFERED=1
        - SECRET_KEY=${SECRET_KEY}
        - PRODUCTION=${PRODUCTION}
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./containers/transcendence:/app
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - ft_transcendence_network
    restart: always

  nginx:
    build:
      context: ./containers/nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - backend
    volumes:
      - ./containers/transcendence/frontend:/usr/share/nginx/html
      - ./containers/nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - ft_transcendence_network
    restart: always

  adminer:
    build: 
      context: ./containers/adminer
      dockerfile: Dockerfile
    container_name: adminer
    ports:
      - "8080:8080"
    networks:
      - ft_transcendence_network
    restart: always
  
  redis:
    build:
      context: ./containers/redis
      dockerfile: Dockerfile
    container_name: redis
    networks:
      - ft_transcendence_network
    restart: always

networks:
  ft_transcendence_network:
    driver: bridge

volumes:
  postgres:
